'use strict';

//Any day formulas default deadline to last business day
//Specific day formulas allow for full range of user selection

//We need to pass an "instance" argument to accomodate situations where the user may want this task to trigger in within current time period

var mongoose = require('mongoose');
var moment = require('moment');
var daysToDeadline = 7;
var deadlineHour = 17;
//How can set this globally to here? Just putting in an array for now...... this needs to be translated to and array of numbers [0-7] where 0 === Sunday
var businessDays = [0, 1, 2, 3, 4, 5, 6, 7];

var allowedDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
var allowedFrequencies = ["Triggered", "Scheduled"];
var allowedIntervalTypes = ['Daily', 'Daily Business Days', 'Weekly', 'Bi-Weekly', 'Monthly', 'Semi-Monthly', 'Quarterly', 'Annually'];
var allowedMonthlyIntervals = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var allowedAnnuallyIntervals = ["First Day of the Year", "Last Day of the Year", "Any Day of the year", "In a Particular Month", "In a Particular Quarter", "# of Days From Start", "# of Days Before end"];
var allowedWeeklyIntervals = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'Any'];
var allowedSemiMonthlyIntervals = ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th", "13th", "14th", "15th"];
var allowedQuarterlyIntervals = ["First Day of the Quarter", "Last Day of the Quarter", "# Days from Start", "# Days from End", "Any"];

module.exports = {

  now: function now() {
    return moment()._d;
  },
  nextDay: function nextDay() {
    return moment().hours(deadlineHour).minute(0).second(0).millisecond(0).add(1, 'days')._d;
  },

  dayOfWeek: function dayOfWeek() {
    return moment().day();
  },

  thisMonth: function thisMonth() {
    return moment().month();
  },

  thisQuarter: function thisQuarter() {
    return moment().quarter();
  },

  thisYear: function thisYear() {
    return moment().year();
  },

  nextMonth: function nextMonth() {
    return moment().month() + 1;
  },

  deadlineToday: function deadlineToday() {
    return moment().hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
  },

  triggeredProjectDeadline: function triggeredProjectDeadline() {
    return moment().hours(deadlineHour).minute(0).second(0).millisecond(0).add(daysToDeadline, 'days')._d;
  },

  dateDeadline: function dateDeadline(date) {
    return moment(date).hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
  },

  weeklyAnyDay: function weeklyAnyDay(instance) {
    //This looks to last business day of week in company settings and puts deadline at the deadline hour of that day each week
    var lastDay = businessDays.sort().reverse()[0];
    var naturalInstance = moment().hours(deadlineHour).minute(0).second(0).millisecond(0).day(lastDay)._d;
    var nextInstance = moment().hours(deadlineHour).minute(0).second(0).millisecond(0).day(lastDay + 7)._d;

    if (moment().isAfter(naturalInstance) === true) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  weeklySpecificDay: function weeklySpecificDay(selectedDay, instance) {
    var naturalInstance = moment().hours(deadlineHour).minute(0).second(0).millisecond(0).day(selectedDay)._d;
    var nextInstance = moment().hours(deadlineHour).minute(0).second(0).millisecond(0).day(selectedDay + 7)._d;

    if (moment().isAfter(naturalInstance) === true) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  biWeeklyAnyDay: function biWeeklyAnyDay(instance) {
    var lastDay = businessDays.sort().reverse()[0];
    var naturalInstance = moment().hours(deadlineHour).minute(0).second(0).millisecond(0).day(lastDay)._d;
    var nextInstance = moment().hours(deadlineHour).minute(0).second(0).millisecond(0).day(lastDay + 14)._d;
    if (moment().isAfter(naturalInstance) === true) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  biWeeklySpecificDay: function biWeeklySpecificDay(selectedDay, instance) {
    var naturalInstance = moment().hours(deadlineHour).minute(0).second(0).millisecond(0).day(selectedDay)._d;
    var nextInstance = moment().hours(deadlineHour).minute(0).second(0).millisecond(0).day(selectedDay + 14)._d;
    if (moment().isAfter(naturalInstance) === true) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  monthlyFirstDay: function monthlyFirstDay() {
    var nextMonth = moment().month() + 1;
    return moment().hours(deadlineHour).minute(0).second(0).millisecond(0).month(nextMonth).date(1)._d;
  },

  monthlyLastDay: function monthlyLastDay(instance) {
    if (instance === "first") {
      return moment().endOf("month").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    } else {
      var nextMonth = moment().month() + 1;
      return moment().month(nextMonth).endOf("month").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    }
  },

  monthlyAnyDay: function monthlyAnyDay(instance) {
    //defaults deadline to the last day of the month same function as monthlyLastDay.... we could do last business day as a strech
    var nextMonth = moment().month() + 1;
    if (instance === "first") {
      return moment().endOf("month").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    } else {
      return moment().month(nextMonth).endOf("month").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    }
  },

  monthlyDaysFromStart: function monthlyDaysFromStart(numDays, instance) {
    var nextMonth = moment().month() + 1;
    var naturalInstance = moment().startOf('month').hours(deadlineHour).minute(0).second(0).millisecond(0).add(numDays - 1, 'days')._d;
    var nextInstance = moment().month(nextMonth).startOf('month').hours(deadlineHour).minute(0).second(0).millisecond(0).add(numDays - 1, 'days')._d;

    if (moment().isAfter(naturalInstance)) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  monthlyDaysBeforeEnd: function monthlyDaysBeforeEnd(numDaysBefore, instance) {
    var nextMonth = moment().month() + 1;
    var naturalInstance = moment().endOf("month").subtract(numDaysBefore, "days").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    var nextInstance = moment().month(nextMonth).endOf("month").subtract(numDaysBefore, "days").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;

    if (moment().isAfter(naturalInstance)) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  quarterlyFirstDay: function quarterlyFirstDay() {
    var nextQuarter = moment().quarter() + 1;
    return moment().hours(deadlineHour).minute(0).second(0).millisecond(0).quarter(nextQuarter).date(1)._d;
  },

  quarterlyLastDay: function quarterlyLastDay(instance) {
    var nextQuarter = moment().quarter() + 1;
    var naturalInstance = moment().endOf("quarter").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    var nextInstance = moment().quarter(nextQuarter).endOf("quarter").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;

    if (moment().isAfter(naturalInstance)) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  quarterlyAnyDay: function quarterlyAnyDay(instance) {
    var nextQuarter = moment().quarter() + 1;
    var naturalInstance = moment().endOf("quarter").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    var nextInstance = moment().quarter(nextQuarter).endOf("quarter").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    if (moment().isAfter(naturalInstance)) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  quarterlyDaysFromStart: function quarterlyDaysFromStart(numDays, instance) {
    var nextQuarter = moment().quarter() + 1;
    var naturalInstance = moment().startOf('quarter').hours(0).seconds(0).millisecond(0).add(numDays, 'days')._d;
    var nextInstance = moment().quarter(nextQuarter).date(1).hours(0).seconds(0).millisecond(0).add(numDays, 'days')._d;

    if (moment().isAfter(naturalInstance) === true) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  quarterlyDaysBeforeEnd: function quarterlyDaysBeforeEnd(numDaysBefore, instance) {
    var nextQuarter = moment().quarter() + 1;
    var naturalInstance = moment().endOf("quarter").subtract(numDaysBefore, "days").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    var nextInstance = moment().quarter(nextQuarter).endOf("quarter").subtract(numDaysBefore, "days").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    if (moment().isAfter(naturalInstance) === true) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  annuallyFirstDay: function annuallyFirstDay(instance) {
    var nextYear = moment().year() + 1;
    return moment().hours(deadlineHour).minute(0).second(0).millisecond(0).year(nextYear).date(1)._d;
  },

  annuallyLastDay: function annuallyLastDay(instance) {
    if (instance === "first") {
      return moment().endOf("year").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    } else {
      var nextYear = moment().year() + 1;
      return moment().year(nextYear).endOf("year").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    }
  },

  annuallyAnyDay: function annuallyAnyDay(instance) {
    var nextYear = moment().year() + 1;
    var naturalInstance = moment().endOf("year").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    var nextInstance = moment().year(nextYear).endOf("year").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;

    if (moment().isAfter(naturalInstance) === true) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  annuallyDaysFromStart: function annuallyDaysFromStart(numDays, instance) {
    var nextYear = moment().year() + 1;
    var naturalInstance = moment().startOf('year').hours(0).seconds(0).millisecond(0).add(numDays, 'days')._d;
    var nextInstance = moment().year(nextYear).startOf('year').hours(0).seconds(0).millisecond(0).add(numDays, 'days')._d;

    if (moment().isAfter(naturalInstance) === true) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  annuallyDaysBeforeEnd: function annuallyDaysBeforeEnd(numDaysBefore, instance) {
    var nextYear = moment().year() + 1;
    var naturalInstance = moment().endOf("year").subtract(numDaysBefore, "days").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    var nextInstance = moment().year(nextYear).endOf("year").subtract(numDaysBefore, "days").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;

    if (moment().isAfter(naturalInstance) === true) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  annuallyParticularMonth: function annuallyParticularMonth(selectedMonth, instance) {
    console.log("#12 - Made it to annuallyParticularMonth");
    console.log("MONTH", selectedMonth);
    var nextYear = moment().year() + 1;
    var naturalInstance = moment().month(selectedMonth).endOf("month").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    var nextInstance = moment().year(nextYear).month(selectedMonth).endOf("month").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;

    if (moment().isAfter(naturalInstance) === true) {
      console.log('!!!!!!');
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      console.log('??????');
      return nextInstance;
    }
  },

  annuallyParticularQuarter: function annuallyParticularQuarter(selectedQuarter, instance) {
    var nextYear = moment().year() + 1;
    var naturalInstance = moment().quarter(selectedQuarter).endOf("quarter").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;
    var nextInstance = moment().year(nextYear).quarter(selectedQuarter).endOf("quarter").hours(deadlineHour).minute(0).second(0).millisecond(0)._d;

    if (moment().isAfter(naturalInstance) === true) {
      return nextInstance;
    } else if (instance === "first") {
      return naturalInstance;
    } else {
      return nextInstance;
    }
  },

  semiMonthlyFirstCycle: function semiMonthlyFirstCycle(selectedDate) {
    return moment().hours(deadlineHour).minute(0).second(0).millisecond(0).date(selectedDate)._d;
  },

  semiMothlySecondCycle: function semiMothlySecondCycle(firstCycleDate) {
    return moment().hours(deadlineHour).minute(0).second(0).millisecond(0).date(firstCycleDate + 15)._d;
  },

  nextBusinessDay: function nextBusinessDay() {
    var isIn = function isIn(increaseDays) {
      //Sets a number for day of the week...Sunday = 0, Monday = 1 etc.
      var today = moment().day();
      var nextBD = today + increaseDays;
      var flag = false;
      for (var i = 1; i < 6; i++) {
        if (i === nextBD) {
          flag = true;
        }
      }
      return flag;
    };
    if (isIn(1) === true) {
      return moment().hours(deadlineHour).minute(0).second(0).millisecond(0).add(1, 'days')._d;
    }
    return moment().hours(deadlineHour).minute(0).second(0).millisecond(0).add(1, "weeks").startOf('isoWeek')._d;
  }

};
//# sourceMappingURL=data:application/json;base64,
