'use strict';

var mongoose = require('mongoose');
var Department = require('../models/Department.js');
var Company = require('../models/Company.js');

module.exports = {
  newDepartment: function newDepartment(req, res) {
    console.log("POST - ADD DEPARTMENT ENDPOINT", req.body);
    var newDepartment = new Department(req.body);
    console.log("COMPANY ID", req.params.companyid);
    Company.findOne({
      _id: req.params.companyid
    }).exec().then(function (result) {
      console.log(result);
      result.departments.push(newDepartment._id);
      result.save();
      // console.log(result);
    });
    newDepartment.save().then(function (result) {
      return res.json(result);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  oneDepartment: function oneDepartment(req, res) {
    console.log("GET - DEPARTMENT ID: ", req.params.id);
    Department.findById(req.params.id).exec().then(function (department) {
      return res.json(department);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  editDepartment: function editDepartment(req, res) {
    console.log("PUT - EDIT DEPARTMENT ID: ", req.params.id);
    Department.update({ _id: req.params.id }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  deleteDepartment: function deleteDepartment(req, res) {
    console.log('DELETE - DEPARTMENT ID: ', req.params.id);
    Department.remove({ _id: req.params.id }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  allDepartments: function allDepartments(req, res) {
    console.log('GET - ALL DEPARTMENTS ENDPOINT');
    Department.find().exec().then(function (departments) {
      return res.json(departments);
    }).catch(function (err) {
      console.log(err);
      return res.status(500).end();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlcl9hc3NldHMvY29udHJvbGxlcnMvZGVwYXJ0bWVudEN0cmwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckMsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDdEQsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7O0FBRWhELE1BQU0sQ0FBQyxPQUFPLEdBQUc7QUFFZixlQUFhLHlCQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDdEIsV0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEQsUUFBTSxhQUFhLEdBQUcsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9DLFdBQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEQsV0FBTyxDQUNBLE9BQU8sQ0FBQztBQUNQLFNBQUcsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVM7S0FDMUIsQ0FBQyxDQUNELElBQUksRUFBRSxDQUNOLElBQUksQ0FBQyxVQUFTLE1BQU0sRUFBRTtBQUNyQixhQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3BCLFlBQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQyxZQUFNLENBQUMsSUFBSSxFQUFFOztBQUFDLEtBRWYsQ0FBQyxDQUFDO0FBQ1QsaUJBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQyxNQUFNLEVBQUs7QUFDcEMsYUFBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3pCLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHLEVBQUs7QUFDaEIsYUFBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzlCLENBQUMsQ0FBQztHQUNKO0FBRUQsZUFBYSx5QkFBQyxHQUFHLEVBQUMsR0FBRyxFQUFFO0FBQ3JCLFdBQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNwRCxjQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQUMsVUFBVSxFQUFLO0FBQzdELGFBQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUM3QixDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRyxFQUFLO0FBQ2hCLGFBQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUM5QixDQUFDLENBQUM7R0FDSjtBQUVELGdCQUFjLDBCQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUU7QUFDdEIsV0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pELGNBQVUsQ0FBQyxNQUFNLENBQUMsRUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQU07QUFDM0QsYUFBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzlCLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHLEVBQUs7QUFDaEIsYUFBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzlCLENBQUMsQ0FBQztHQUNKO0FBRUQsa0JBQWdCLDRCQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUU7QUFDeEIsV0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZELGNBQVUsQ0FBQyxNQUFNLENBQUMsRUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQU07QUFDM0QsYUFBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzlCLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHLEVBQUs7QUFDaEIsYUFBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzlCLENBQUMsQ0FBQztHQUNKO0FBRUQsZ0JBQWMsMEJBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUN2QixXQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDOUMsY0FBVSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFDLFdBQVcsRUFBSztBQUM3QyxhQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDOUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUcsRUFBSztBQUNoQixhQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLGFBQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUM5QixDQUFDLENBQUM7R0FDSjtDQUVGLENBQUMiLCJmaWxlIjoic2VydmVyX2Fzc2V0cy9jb250cm9sbGVycy9kZXBhcnRtZW50Q3RybC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcbmNvbnN0IERlcGFydG1lbnQgPSByZXF1aXJlKCcuLi9tb2RlbHMvRGVwYXJ0bWVudC5qcycpO1xuY29uc3QgQ29tcGFueSA9IHJlcXVpcmUoJy4uL21vZGVscy9Db21wYW55LmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG5ld0RlcGFydG1lbnQocmVxLCByZXMpIHtcbiAgICBjb25zb2xlLmxvZyhcIlBPU1QgLSBBREQgREVQQVJUTUVOVCBFTkRQT0lOVFwiLCByZXEuYm9keSk7XG4gICAgY29uc3QgbmV3RGVwYXJ0bWVudCA9IG5ldyBEZXBhcnRtZW50KHJlcS5ib2R5KTtcbiAgICBjb25zb2xlLmxvZyhcIkNPTVBBTlkgSURcIiwgcmVxLnBhcmFtcy5jb21wYW55aWQpO1xuICAgIENvbXBhbnlcbiAgICAgICAgICAuZmluZE9uZSh7XG4gICAgICAgICAgICBfaWQ6IHJlcS5wYXJhbXMuY29tcGFueWlkXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZXhlYygpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICAgICAgcmVzdWx0LmRlcGFydG1lbnRzLnB1c2gobmV3RGVwYXJ0bWVudC5faWQpO1xuICAgICAgICAgICAgcmVzdWx0LnNhdmUoKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgICAgICAgfSk7XG4gICAgbmV3RGVwYXJ0bWVudC5zYXZlKCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICByZXR1cm4gcmVzLmpzb24ocmVzdWx0KTtcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmVuZCgpO1xuICAgIH0pO1xuICB9LFxuXG4gIG9uZURlcGFydG1lbnQocmVxLHJlcykge1xuICAgIGNvbnNvbGUubG9nKFwiR0VUIC0gREVQQVJUTUVOVCBJRDogXCIsIHJlcS5wYXJhbXMuaWQpO1xuICAgIERlcGFydG1lbnQuZmluZEJ5SWQocmVxLnBhcmFtcy5pZCkuZXhlYygpLnRoZW4oKGRlcGFydG1lbnQpID0+IHtcbiAgICAgIHJldHVybiByZXMuanNvbihkZXBhcnRtZW50KTtcbiAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmVuZCgpO1xuICAgIH0pO1xuICB9LFxuXG4gIGVkaXREZXBhcnRtZW50KHJlcSxyZXMpIHtcbiAgICBjb25zb2xlLmxvZyhcIlBVVCAtIEVESVQgREVQQVJUTUVOVCBJRDogXCIsIHJlcS5wYXJhbXMuaWQpO1xuICAgIERlcGFydG1lbnQudXBkYXRlKHtfaWQ6IHJlcS5wYXJhbXMuaWR9LCByZXEuYm9keSkudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmVuZCgpO1xuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuZW5kKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgZGVsZXRlRGVwYXJ0bWVudChyZXEscmVzKSB7XG4gICAgY29uc29sZS5sb2coJ0RFTEVURSAtIERFUEFSVE1FTlQgSUQ6ICcsIHJlcS5wYXJhbXMuaWQpO1xuICAgIERlcGFydG1lbnQucmVtb3ZlKHtfaWQ6IHJlcS5wYXJhbXMuaWR9LCByZXEuYm9keSkudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmVuZCgpO1xuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuZW5kKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgYWxsRGVwYXJ0bWVudHMocmVxLCByZXMpIHtcbiAgICBjb25zb2xlLmxvZygnR0VUIC0gQUxMIERFUEFSVE1FTlRTIEVORFBPSU5UJyk7XG4gICAgRGVwYXJ0bWVudC5maW5kKCkuZXhlYygpLnRoZW4oKGRlcGFydG1lbnRzKSA9PiB7XG4gICAgICByZXR1cm4gcmVzLmpzb24oZGVwYXJ0bWVudHMpO1xuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmVuZCgpO1xuICAgIH0pO1xuICB9XG5cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
