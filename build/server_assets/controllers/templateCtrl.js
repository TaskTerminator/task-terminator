'use strict';

var mongoose = require('mongoose');
var Template = require('../models/Template.js');
var TemplateTask = require('../models/TemplateTask.js');
var Department = require('../models/Department.js');
var Position = require('../models/Position.js');
var Employee = require('../models/Employee.js');

module.exports = {
  newTemplate: function newTemplate(req, res) {
    var template = new Template(req.body);
    template.save().then(function (result) {
      return res.json(result);
    }).catch(function (err) {
      return res.status(500).end();
    });
  },
  oneTemplate: function oneTemplate(req, res) {

    var templateOptions = {
      path: 'tasks',
      model: 'TemplateTask',
      populate: {
        path: "assignment.employees",
        model: "Employee",
        select: "identification.name.fullName"
      }
    };

    console.log("id?", req.params.id);

    Template.findById(req.params.id).populate(templateOptions).exec().then(function (result) {
      console.log("RESULT ON back", result);
      return res.json(result);
    }).catch(function (err) {
      console.log(err.stack);
      return res.status(500).end();
    });
  },
  editTemplate: function editTemplate(req, res) {
    Template.update({ _id: req.params.id }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      console.log(err.stack);
      return res.status(500).end();
    });
  },
  deleteTemplate: function deleteTemplate(req, res) {
    Template.remove({ _id: req.params.id }, req.body).then(function () {
      return res.status(200).end();
    }).catch(function (err) {
      console.log(err.stack);
      return res.status(500).end();
    });
  },
  allTemplates: function allTemplates(req, res) {
    Template.find().populate('tasks').exec().then(function (result) {
      return res.json(result);
    }).catch(function (err) {
      console.log(err.stack);
      return res.status(500).end();
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlcl9hc3NldHMvY29udHJvbGxlcnMvdGVtcGxhdGVDdHJsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ2xELElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzFELElBQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ3RELElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ2xELElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDOztBQUVsRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBRWpCLGFBQVcsdUJBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUNwQixRQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEMsWUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFDLE1BQU0sRUFBSztBQUMvQixhQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDekIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUcsRUFBSztBQUNoQixhQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDOUIsQ0FBQyxDQUFDO0dBQ0o7QUFFRCxhQUFXLHVCQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7O0FBRXBCLFFBQUksZUFBZSxHQUFHO0FBQ3BCLFVBQUksRUFBRSxPQUFPO0FBQ2IsV0FBSyxFQUFFLGNBQWM7QUFDckIsY0FBUSxFQUFFO0FBQ1IsWUFBSSxFQUFDLHNCQUFzQjtBQUMzQixhQUFLLEVBQUUsVUFBVTtBQUNqQixjQUFNLEVBQUUsOEJBQThCO09BQ3ZDO0tBQ0YsQ0FBQTs7QUFFRCxXQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztBQUVsQyxZQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQy9CLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDaEMsSUFBSSxDQUFDLFVBQUMsTUFBTSxFQUFLO0FBQ2hCLGFBQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEMsYUFBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3pCLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHLEVBQUs7QUFDaEIsYUFBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkIsYUFBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzlCLENBQUMsQ0FBQztHQUNKO0FBRUQsY0FBWSx3QkFBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO0FBQ3JCLFlBQVEsQ0FBQyxNQUFNLENBQUMsRUFBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQU07QUFDekQsYUFBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzlCLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHLEVBQUs7QUFDaEIsYUFBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdkIsYUFBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQzlCLENBQUMsQ0FBQztHQUNKO0FBRUQsZ0JBQWMsMEJBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUN2QixZQUFRLENBQUMsTUFBTSxDQUFDLEVBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFNO0FBQ3pELGFBQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUM5QixDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRyxFQUFLO0FBQ2hCLGFBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZCLGFBQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUM5QixDQUFDLENBQUM7R0FDSjtBQUVELGNBQVksd0JBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtBQUNyQixZQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFDLE1BQU0sRUFBSztBQUN4RCxhQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDekIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUcsRUFBSztBQUNoQixhQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN2QixhQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDOUIsQ0FBQyxDQUFDO0dBQ0o7Q0FFQSxDQUFDIiwiZmlsZSI6InNlcnZlcl9hc3NldHMvY29udHJvbGxlcnMvdGVtcGxhdGVDdHJsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuY29uc3QgVGVtcGxhdGUgPSByZXF1aXJlKCcuLi9tb2RlbHMvVGVtcGxhdGUuanMnKTtcbmNvbnN0IFRlbXBsYXRlVGFzayA9IHJlcXVpcmUoJy4uL21vZGVscy9UZW1wbGF0ZVRhc2suanMnKTtcbmNvbnN0IERlcGFydG1lbnQgPSByZXF1aXJlKCcuLi9tb2RlbHMvRGVwYXJ0bWVudC5qcycpO1xuY29uc3QgUG9zaXRpb24gPSByZXF1aXJlKCcuLi9tb2RlbHMvUG9zaXRpb24uanMnKTtcbmNvbnN0IEVtcGxveWVlID0gcmVxdWlyZSgnLi4vbW9kZWxzL0VtcGxveWVlLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG5uZXdUZW1wbGF0ZShyZXEsIHJlcykge1xuICBjb25zdCB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShyZXEuYm9keSk7XG4gIHRlbXBsYXRlLnNhdmUoKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICByZXR1cm4gcmVzLmpzb24ocmVzdWx0KTtcbiAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuZW5kKCk7XG4gIH0pO1xufSxcblxub25lVGVtcGxhdGUocmVxLCByZXMpIHtcblxuICB2YXIgdGVtcGxhdGVPcHRpb25zID0ge1xuICAgIHBhdGg6ICd0YXNrcycsXG4gICAgbW9kZWw6ICdUZW1wbGF0ZVRhc2snLFxuICAgIHBvcHVsYXRlOiB7XG4gICAgICBwYXRoOlwiYXNzaWdubWVudC5lbXBsb3llZXNcIixcbiAgICAgIG1vZGVsOiBcIkVtcGxveWVlXCIsXG4gICAgICBzZWxlY3Q6IFwiaWRlbnRpZmljYXRpb24ubmFtZS5mdWxsTmFtZVwiXG4gICAgfVxuICB9XG5cbiAgY29uc29sZS5sb2coXCJpZD9cIiwgcmVxLnBhcmFtcy5pZCk7XG5cbiAgVGVtcGxhdGUuZmluZEJ5SWQocmVxLnBhcmFtcy5pZClcbiAgLnBvcHVsYXRlKHRlbXBsYXRlT3B0aW9ucykuZXhlYygpXG4gIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIlJFU1VMVCBPTiBiYWNrXCIsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlcy5qc29uKHJlc3VsdCk7XG4gIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICBjb25zb2xlLmxvZyhlcnIuc3RhY2spO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuZW5kKCk7XG4gIH0pO1xufSxcblxuZWRpdFRlbXBsYXRlKHJlcSwgcmVzKSB7XG4gIFRlbXBsYXRlLnVwZGF0ZSh7X2lkOiByZXEucGFyYW1zLmlkfSwgcmVxLmJvZHkpLnRoZW4oKCkgPT4ge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuZW5kKCk7XG4gIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICBjb25zb2xlLmxvZyhlcnIuc3RhY2spO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuZW5kKCk7XG4gIH0pO1xufSxcblxuZGVsZXRlVGVtcGxhdGUocmVxLCByZXMpIHtcbiAgVGVtcGxhdGUucmVtb3ZlKHtfaWQ6IHJlcS5wYXJhbXMuaWR9LCByZXEuYm9keSkudGhlbigoKSA9PiB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5lbmQoKTtcbiAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgIGNvbnNvbGUubG9nKGVyci5zdGFjayk7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5lbmQoKTtcbiAgfSk7XG59LFxuXG5hbGxUZW1wbGF0ZXMocmVxLCByZXMpIHtcbiAgVGVtcGxhdGUuZmluZCgpLnBvcHVsYXRlKCd0YXNrcycpLmV4ZWMoKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICByZXR1cm4gcmVzLmpzb24ocmVzdWx0KTtcbiAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgIGNvbnNvbGUubG9nKGVyci5zdGFjayk7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5lbmQoKTtcbiAgfSk7XG59XG5cbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
