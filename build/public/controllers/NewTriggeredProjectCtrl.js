'use strict';

angular.module('terminatorApp').controller('NewTriggeredProjectCtrl', function ($scope, ProjectsSvc, $state) {

	$scope.newTriggeredForm = {
		setup: {
			type: "Triggered"
		}
	};

	$scope.selectedAssign = '';

	$scope.addTriggeredTemplate = function (newTriggeredForm) {
		if (newTriggeredForm.name === undefined) {
			alert('Please enter a project name.');
		} else {
			ProjectsSvc.postTriggeredTemplate(newTriggeredForm).then(function (results) {
				console.log("New Triggered Template added", results);
				$state.go('dashboard.templateView', { id: results._id });
			}).catch(function (err) {
				// $scope.alerts.push({msg: "Failed to Create Project", type: "danger"});
				console.log("Error", err);
			});
		}
	};

	$scope.newTasksArr = [];

	$scope.newTask = {
		name: '',
		description: '',
		assignment: {
			departments: '',
			positions: '',
			employees: ''
		}
	};

	$scope.saveTask = function (newTask) {
		newTask.associatedTemplate = $scope.templateID;
		console.log(newTask);
		if (newTask.assignment.departments) newTask.assignment.departments = newTask.assignment.departments._id;
		if (newTask.assignment.positions) newTask.assignment.positions = newTask.assignment.positions._id;
		if (newTask.assignment.employees) newTask.assignment.employee = newTask.assignment.employee._id;
		$scope.newTasksArr.push(newTask);
		console.log("newTasksArr", $scope.newTasksArr);
		$scope.newTask = {
			name: '',
			description: '',
			assignment: {
				departments: '',
				positions: '',
				employees: ''
			}
		};
		// $scope.selectedAssign = null; tryig to clear drop downs with this.
	};

	$scope.addTasks = function (newTasksArr) {
		ProjectsSvc.postTasks(newTasksArr, $scope.templateID).then(function (results) {
			console.log("Tasks added successfully", results);
			// $state.go('projects');
		});
		$scope.newTasksArr = [];
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1YmxpYy9jb250cm9sbGVycy9OZXdUcmlnZ2VyZWRQcm9qZWN0Q3RybC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsVUFBVSxDQUFDLHlCQUF5QixFQUFFLFVBQVMsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUU7O0FBRXpHLE9BQU0sQ0FBQyxnQkFBZ0IsR0FBRztBQUMzQixPQUFLLEVBQUU7QUFDTixPQUFJLEVBQUUsV0FBVztHQUNqQjtFQUNELENBQUM7O0FBRUEsT0FBTSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7O0FBRTNCLE9BQU0sQ0FBQyxvQkFBb0IsR0FBRyxVQUFVLGdCQUFnQixFQUFFO0FBQ3JELE1BQUksZ0JBQWdCLENBQUMsSUFBSSxLQUFHLFNBQVMsRUFBRTtBQUNuQyxRQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztHQUN6QyxNQUFNO0FBQ0gsY0FBVyxDQUFDLHFCQUFxQixDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsT0FBTyxFQUFFO0FBQ3pFLFdBQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDckQsVUFBTSxDQUFDLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxFQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVMsR0FBRyxFQUFFOztBQUVyQixXQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUM7R0FDTjtFQUNQLENBQUM7O0FBRUYsT0FBTSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7O0FBRXhCLE9BQU0sQ0FBQyxPQUFPLEdBQUc7QUFDWCxNQUFJLEVBQUUsRUFBRTtBQUNSLGFBQVcsRUFBRSxFQUFFO0FBQ2YsWUFBVSxFQUFFO0FBQ1YsY0FBVyxFQUFFLEVBQUU7QUFDZixZQUFTLEVBQUUsRUFBRTtBQUNiLFlBQVMsRUFBRSxFQUFFO0dBQ2Q7RUFDRixDQUFDOztBQUVKLE9BQU0sQ0FBQyxRQUFRLEdBQUcsVUFBUyxPQUFPLEVBQUU7QUFDbEMsU0FBTyxDQUFDLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7QUFDL0MsU0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyQixNQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztBQUN2RyxNQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQUNqRyxNQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztBQUMvRixRQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqQyxTQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDL0MsUUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLE9BQUksRUFBRSxFQUFFO0FBQ1IsY0FBVyxFQUFFLEVBQUU7QUFDZixhQUFVLEVBQUU7QUFDVixlQUFXLEVBQUUsRUFBRTtBQUNmLGFBQVMsRUFBRSxFQUFFO0FBQ2IsYUFBUyxFQUFFLEVBQUU7SUFDZDtHQUNGOztBQUFDLEVBRUgsQ0FBQzs7QUFFRixPQUFNLENBQUMsUUFBUSxHQUFHLFVBQVMsV0FBVyxFQUFFO0FBQ3RDLGFBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBUyxPQUFPLEVBQUU7QUFDM0UsVUFBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxPQUFPLENBQUM7O0FBQUMsR0FFbEQsQ0FBQyxDQUFDO0FBQ0gsUUFBTSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7RUFDekIsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJwdWJsaWMvY29udHJvbGxlcnMvTmV3VHJpZ2dlcmVkUHJvamVjdEN0cmwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgndGVybWluYXRvckFwcCcpLmNvbnRyb2xsZXIoJ05ld1RyaWdnZXJlZFByb2plY3RDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBQcm9qZWN0c1N2YywgJHN0YXRlKSB7XG5cbiAgXHQkc2NvcGUubmV3VHJpZ2dlcmVkRm9ybSA9IHtcblx0XHRzZXR1cDoge1xuXHRcdFx0dHlwZTogXCJUcmlnZ2VyZWRcIlxuXHRcdH1cblx0fTtcbiAgICBcbiAgXHQkc2NvcGUuc2VsZWN0ZWRBc3NpZ24gPSAnJztcblxuICBcdCRzY29wZS5hZGRUcmlnZ2VyZWRUZW1wbGF0ZSA9IGZ1bmN0aW9uIChuZXdUcmlnZ2VyZWRGb3JtKSB7XG4gICAgICAgIGlmIChuZXdUcmlnZ2VyZWRGb3JtLm5hbWU9PT11bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFsZXJ0KCdQbGVhc2UgZW50ZXIgYSBwcm9qZWN0IG5hbWUuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBQcm9qZWN0c1N2Yy5wb3N0VHJpZ2dlcmVkVGVtcGxhdGUobmV3VHJpZ2dlcmVkRm9ybSkudGhlbihmdW5jdGlvbihyZXN1bHRzKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTmV3IFRyaWdnZXJlZCBUZW1wbGF0ZSBhZGRlZFwiLCByZXN1bHRzKTtcbiAgICAgICAgICAgICAgJHN0YXRlLmdvKCdkYXNoYm9hcmQudGVtcGxhdGVWaWV3Jywge2lkOiByZXN1bHRzLl9pZH0pO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgIC8vICRzY29wZS5hbGVydHMucHVzaCh7bXNnOiBcIkZhaWxlZCB0byBDcmVhdGUgUHJvamVjdFwiLCB0eXBlOiBcImRhbmdlclwifSk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgIH0pOyAgICAgICAgXG4gICAgICAgIH1cblx0fTtcblxuXHQkc2NvcGUubmV3VGFza3NBcnIgPSBbXTtcblxuXHQkc2NvcGUubmV3VGFzayA9IHtcblx0ICAgICAgbmFtZTogJycsXG5cdCAgICAgIGRlc2NyaXB0aW9uOiAnJyxcblx0ICAgICAgYXNzaWdubWVudDoge1xuXHQgICAgICAgIGRlcGFydG1lbnRzOiAnJyxcblx0ICAgICAgICBwb3NpdGlvbnM6ICcnLFxuXHQgICAgICAgIGVtcGxveWVlczogJydcblx0ICAgICAgfVxuXHQgICAgfTtcblxuICBcdCRzY29wZS5zYXZlVGFzayA9IGZ1bmN0aW9uKG5ld1Rhc2spIHtcblx0ICAgIG5ld1Rhc2suYXNzb2NpYXRlZFRlbXBsYXRlID0gJHNjb3BlLnRlbXBsYXRlSUQ7XG5cdCAgICBjb25zb2xlLmxvZyhuZXdUYXNrKTtcblx0ICAgIGlmKG5ld1Rhc2suYXNzaWdubWVudC5kZXBhcnRtZW50cykgbmV3VGFzay5hc3NpZ25tZW50LmRlcGFydG1lbnRzID0gbmV3VGFzay5hc3NpZ25tZW50LmRlcGFydG1lbnRzLl9pZDtcblx0ICAgIGlmKG5ld1Rhc2suYXNzaWdubWVudC5wb3NpdGlvbnMpIG5ld1Rhc2suYXNzaWdubWVudC5wb3NpdGlvbnMgPSBuZXdUYXNrLmFzc2lnbm1lbnQucG9zaXRpb25zLl9pZDtcblx0ICAgIGlmKG5ld1Rhc2suYXNzaWdubWVudC5lbXBsb3llZXMpIG5ld1Rhc2suYXNzaWdubWVudC5lbXBsb3llZSA9IG5ld1Rhc2suYXNzaWdubWVudC5lbXBsb3llZS5faWQ7XG5cdCAgICAkc2NvcGUubmV3VGFza3NBcnIucHVzaChuZXdUYXNrKTtcblx0ICAgIGNvbnNvbGUubG9nKFwibmV3VGFza3NBcnJcIiwgJHNjb3BlLm5ld1Rhc2tzQXJyKTtcblx0ICAgICRzY29wZS5uZXdUYXNrID0ge1xuXHQgICAgICBuYW1lOiAnJyxcblx0ICAgICAgZGVzY3JpcHRpb246ICcnLFxuXHQgICAgICBhc3NpZ25tZW50OiB7XG5cdCAgICAgICAgZGVwYXJ0bWVudHM6ICcnLFxuXHQgICAgICAgIHBvc2l0aW9uczogJycsXG5cdCAgICAgICAgZW1wbG95ZWVzOiAnJ1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLy8gJHNjb3BlLnNlbGVjdGVkQXNzaWduID0gbnVsbDsgdHJ5aWcgdG8gY2xlYXIgZHJvcCBkb3ducyB3aXRoIHRoaXMuXG4gIFx0fTtcblxuICBcdCRzY29wZS5hZGRUYXNrcyA9IGZ1bmN0aW9uKG5ld1Rhc2tzQXJyKSB7XG5cdCAgICBQcm9qZWN0c1N2Yy5wb3N0VGFza3MobmV3VGFza3NBcnIsICRzY29wZS50ZW1wbGF0ZUlEKS50aGVuKGZ1bmN0aW9uKHJlc3VsdHMpIHtcblx0ICAgICAgY29uc29sZS5sb2coXCJUYXNrcyBhZGRlZCBzdWNjZXNzZnVsbHlcIiwgcmVzdWx0cyk7XG5cdCAgICAgIC8vICRzdGF0ZS5nbygncHJvamVjdHMnKTtcblx0ICAgIH0pO1xuXHQgICAgJHNjb3BlLm5ld1Rhc2tzQXJyID0gW107XG4gIFx0fTtcblxufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
